/*
 * go-openapi-generator-example
 *
 * Example of REST API. Includes such things as MongoDB, slog, gorilla mux etc... Some kind of a sample project API for educational purposes.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"

	"github.com/google/uuid"
	openapi "github.com/perfectgentlemande/go-openapi-generator-example/openapi"
	"github.com/rs/zerolog"
)

type Controller struct {
}

func (c *Controller) UserGet(ctx context.Context, limit int64, offset int64) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: []openapi.User{
			{
				Id:       uuid.NewString(),
				Username: "alice01",
			},
			{
				Id:       uuid.NewString(),
				Username: "bob01",
			},
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserIdDelete(ctx context.Context, id string) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserIdGet(ctx context.Context, id string) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserIdPut(ctx context.Context, id string) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserPost(ctx context.Context) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}

func main() {
	log := zerolog.New(os.Stdout).With().Timestamp().Logger()

	ctx, _ := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGKILL)

	UserAPIService := &Controller{}
	UserAPIController := openapi.NewUserAPIController(UserAPIService)

	router := openapi.NewRouter(UserAPIController)

	srv := &http.Server{
		Addr:    ":8080",
		Handler: router,
	}

	wg := &sync.WaitGroup{}
	wg.Add(2)

	go func() {
		defer wg.Done()

		log.Info().Str("addr", ":8080").Msg("server starting")
		err := srv.ListenAndServe()
		if err != nil {
			log.Err(err).Msg("caught server listenAndServe error")
		} else {
			log.Info().Msg("no error after listen and serve")
		}
	}()
	go func() {
		defer wg.Done()

		<-ctx.Done()
		log.Info().Msg("caught os signal: server will be shut down")

		err := srv.Shutdown(context.Background())
		if err != nil {
			log.Err(err).Msg("caught server shutdown error")
		} else {
			log.Info().Msg("server shutdown successful")
		}
	}()

	wg.Wait()
}
