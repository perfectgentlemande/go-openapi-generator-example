/*
 * go-openapi-generator-example
 *
 * Example of REST API. Includes such things as MongoDB, slog, gorilla mux etc... Some kind of a sample project API for educational purposes.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"log"
	"log/slog"
	"net/http"
	"os"

	"github.com/google/uuid"
	openapi "github.com/perfectgentlemande/go-openapi-generator-example/openapi"
)

type Controller struct {
}

func (c *Controller) UserGet(ctx context.Context, limit int64, offset int64) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: []openapi.User{
			{
				Id:       uuid.NewString(),
				Username: "alice01",
			},
			{
				Id:       uuid.NewString(),
				Username: "bob01",
			},
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserIdDelete(ctx context.Context, id string) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserIdGet(ctx context.Context, id string) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserIdPut(ctx context.Context, id string) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}
func (c *Controller) UserPost(ctx context.Context) (openapi.ImplResponse, error) {
	return openapi.ImplResponse{
		Body: openapi.User{
			Id:       uuid.NewString(),
			Username: "alice01",
		},
		Code: 200,
	}, nil
}

func main() {
	opts := &slog.HandlerOptions{
		Level: slog.LevelInfo,
	}
	handler := slog.NewJSONHandler(os.Stdout, opts)
	logger := slog.New(handler)

	UserAPIService := &Controller{}
	UserAPIController := openapi.NewUserAPIController(UserAPIService)

	router := openapi.NewRouter(UserAPIController)

	logger.Info("Server starting", "addr", ":8000")
	log.Fatal(http.ListenAndServe(":8080", router))
}
